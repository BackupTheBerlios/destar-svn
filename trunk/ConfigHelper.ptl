# -*- coding: iso-latin-1 -*-
#
# Copyright (C) 2005 by Holger Schurig
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


from Templates import *
from quixote.form2 import *
from quixote.html import htmlescape
import backend
import types, string


class ROStringWidget(StringWidget):
	"""Widget for output of a simple read-only string
	"""

	def render_content(self):
		return htmltext(self.value)


class LabelWidget(Widget):
	"""Widget for output of a simple label, useful for grouping.
	"""

	def render_content(self):
		"""There isn't content to render and the inherited 
		render_title already rendered the title for us."""

		pass


def presentEditableConfiglets [plain] (configlets):
        if configlets:
                # Show currently defined configlets
                '<table id="configureditems">'
                '<thead>'
                '<tr>'
                '<th>%s</th>' % _("E")
                '<th>%s</th>' % _("D")
                '<th>%s</th>' % _("U")
                for f in configlets[0].head():
                        '<th>%s</th>' % htmltext(_(f))
                '</tr>'
                '</thead>'
                n = 0
                for o in configlets:
                        '<tr>'
                        '<td><a href="../edit/%s"><img src="/static/edit.gif" border="0" alt="Edit" /></a></td>' % o._id
                        if n<len(configlets)-1:
                                '<td><a href="../down/%s"><img src="/static/down.gif" border="0" alt="Move down" /></a></td>' % o._id
                        else:
                                '<td>&nbsp;</td>'
                        if n>0:
                                '<td><a href="../up/%s"><img src="/static/up.gif" border="0" alt="Move up" /></a></td>' % o._id
                        else:
                                '<td>&nbsp;</td>'
                        wrap = True
                        for f in o.row():
                                if wrap:
                                        '<td><a href="../edit/%s">%s</a></td>' % (o._id, htmlescape(f))
                                        wrap = False
				else:
					if f == "":
						f = " "
	                                '<td>%s</td>' % htmlescape(_(f))
                        '</tr>'
                        n = n + 1
                '</table>'


def presentAddableConfiglets [plain] (group, configlets):
        # Show addable configlets
        configlets.sort(lambda x,y: cmp(x.shortName,y.shortName) )
        head = False
        for o in configlets:
                if not o.isAddable():
                        continue
                if not head:
			'<br/><br/>'
                        '<div class="addmore"><h3>%s %s</h3><ul>' % (_("Add more"),_(group))   
                        head = True
                '<li><a href="../add/%s">%s</a></li>' % (o.__name__, _(o.shortName))
        if head:
                '</ul></div>'


def presentConfiglets [plain] (group):
	presentEditableConfiglets( backend.getConfiglets(group) )
	presentAddableConfiglets( group, backend.configletsList(group) )


def __addit__(obj):
	backend.addConfiglet(obj)
	backend.createAsteriskConfig()

def lookupConfiglets(request,component):
        if not component:
                return errorpage(_("Invalid URL"))

        try:
                obj = backend.newConfiglet(component)
        except KeyError:
                return errorpage("%s %s" % (_("Object does not exist"),component))
        return configletsForm(request,
                obj,
                #title = _("New") + " " + obj.shortName,
                title = obj.newObjectTitle,
                exitPath = "../" + obj.groupName.lower(),
                actionCallback=__addit__,
                new=True)




def configletsForm (request, obj, title, exitPath="..", actionCallback=None, new=False, menu=None):
	"""This is the class that dynamically create the web forms to edit
	configlets.

	'request' is the http-request from Quixote.
	'obj' is the configlet we're editing.
	'title' is the title of the form.
	'exitPath' is the URL we're visiting when the user presses CANCEL or SUBMIT/UPDATE.
	'actionCallback' is a callable that get's executed after the configlet has been saved.
	'new': is True if we create a new object, False if we're just editing an object.
	'menu': is the menu on the left side."""

	def render_desc():
		"""Just renders the description. Substitutes an empty line
		with a <p> paragraph marker."""

		try:
			return htmltext('<p>%s</p>' % obj.description.replace("\n\n","</p><p>"))
		except:
			return None


	def render [html] ():
		header(title, menu)
		render_desc()
		form.render()
		footer()


	def saveConfig(withCallback=True):
		"""Saves all values from the form into the configlet 'obj'."""

		#print "action", obj
		for v in obj.variables:
			if v.hide:
				continue
			_v = form[v.name]
			#print "0", _v, v.name, v.type
			if v.type=="bool" and not _v:
				_v = False
			elif v.type=="string" and _v==None:
				_v = ""
			elif type(_v) == types.ListType:
				_v = ','.join(_v)
			#print 1,_v
			obj.__dict__[v.name] = _v
			if v.name == 'name':
				backend.fixupConfiglets()
				obj.renameDependencies(_v)
		if withCallback and actionCallback:
			actionCallback(obj)
			

	def checkConfig():
		"""Can be used to check the configuration. This is done by temporarily
		storing the form values into the object, calling the checkConfig()
		method of the configlet and setting any errors. Then we restore the
		object."""

		backup = copy.copy(obj.__dict__)
		saveConfig(False)
		ret = obj.checkConfig()
		if ret:
			form.set_error(ret[0],ret[1])
		obj.__dict__ = backup
		
	def showDependencies [html]():
		header(title, menu)
		#render_desc()
		form2 = Form()
		form2.add(SubmitWidget, '_cascade_delete', _(str("Cascade Delete")), render_br=False)
		form2.add(SubmitWidget, '_cancel', _(str("Cancel")), render_br=False)
		'<h2>'
		_(str("Warning"))
		'</h2>'
		'<p>'
		_(str("The following configlets depends on this object in a direct or indirect way:"))
		'</p>'
		'<table>'
		for dep in obj.dependent_objs:
			if dep.dependency.type == "hard":
				dep_type = _(str("Hard Dependency:"))
				color = 'red'
			else:
				dep_type = _(str("Soft Dependency:"))
				color = 'green'
			'<tr>'
			'<td><span style="color:%s">%s</span></td>' % (color, dep_type)
			for cell in dep.configlet.row():
				'<td>'
				'<a href="../edit/%s">%s</a>' % (dep.configlet._id, cell)
				'</td>'
			'<td>'
			dep.dependency.message
			'</td>'
			'</tr>'
			
		'</table>'
		'<br />'
		'<br />'
		'<h3>Note:</h3>'
		'<p>'
		'<span style="color:red">'
		_(str("Hard dependency: The dependent object can not exist if this object is deleted"))
		'<br />'
		'</span>'
		'<span style="color:green">'
		_(str("Soft dependency. The dependent object still can exist if this object is deleted"))
		'</span>'
		'</p>'
		form2.render()
		footer()


	form = Form()

	if request.form.has_key('_cancel'):
		return request.redirect(exitPath)
	if request.form.has_key('_delete'):
		if obj.hasDependencies():
			return showDependencies()
		else:
			backend.deleteConfiglet(obj._id)
			return request.redirect(exitPath)
	if request.form.has_key('_cascade_delete'):
		backend.deleteConfiglet(obj._id)
		return request.redirect(exitPath)


	do_update = False
	for v in obj.variables:
		if v.hide:
			continue
		try:
			_v = obj.__dict__[v.name]
		except:
			_v = ''
		if _v: do_update = True
		t = htmltext(v.title)
		r = not v.optional
		if v.type=="string":
			form.add(StringWidget, v.name, _v, t, v.hint, r, render_br=v.render_br, maxlength=v.len, size=min(v.size,56) )
		elif v.type=="text":
			form.add(TextWidget,   v.name, _v, t, v.hint, r, render_br=v.render_br, rows=v.__dict__.setdefault("rows",8), cols=v.__dict__.setdefault("cols",65) )
		elif v.type=="choice":
			opts = v.options
			if type(opts) == types.FunctionType:
				opts = opts()
			if v.optional and opts[0][0]:
				opts.insert(0, ('',''))
			elif not opts:
				return errorpage(_("Required '%s' not found") % v.name)
			form.add(SingleSelectWidget, v.name, _v, title=t, hint=v.hint, required=r, options=opts,render_br=v.render_br)
		elif v.type=="mchoice":
			# TODO: much of this code should NOT by in a *.ptl file
			if not v.__dict__.has_key("options") and v.name=="include":
				v.options = [('','')]
				for c in backend.getConfiglets(groupName="CfgPermDeny"):
					try:
						desc = c.desc
					except AttributeError:
						desc = c.context
					v.options.append((c.name,desc))
			if type(_v) == types.StringType:
				_v = map(string.strip, _v.split(','))
			opts = v.options
			if type(opts) == types.FunctionType:
				opts = opts()
			if v.optional and type(opts) == types.ListType:
				if opts[0][0]:
					opts.insert(0, ('',''))
			elif not opts:
				return errorpage(_("Required '%s' not found") % v.name)
			form.add(MultipleSelectWidget, v.name, _v, title=t, hint=v.hint, required=r, options=opts,render_br=v.render_br)
		elif v.type=="radio":
			opts = v.options
			if type(opts) == types.FunctionType:
				opts = opts()
			if not opts:
				return errorpage(_("Required '%s' not found") % v.name)
			form.add(RadiobuttonsWidget, v.name, _v, title=t, hint=v.hint, required=r, options=opts, render_br=v.render_br)
		elif v.type=="int":
			form.add(IntWidget,      v.name, _v, title=t, hint=v.hint, required=r, maxlength=v.len, size=min(v.len,15), render_br=v.render_br )
		elif v.type=="bool":
			form.add(CheckboxWidget, v.name, _v, t, v.hint, r, render_br=v.render_br)
		elif v.type=="label":
			form.add(LabelWidget,    v.name, title=t, render_br=True)
		elif v.type=="rostring":
			#form.add(ROStringWidget,    v.name, title=t, render_br=True)
			form.add(ROStringWidget, v.name, _v, t, v.hint, r, render_br=v.render_br, maxlength=v.len, size=min(v.size,56) )
		else:
			form.add(StringWidget,   v.name, "Unknown type %s" % v.type)
	
	if new or not obj.isAddable():
		txt_submit = _("Submit")
		txt_delete = ""
	else:
		txt_submit = _("Update")
		txt_delete = _("Delete")

	if txt_submit:
		form.add(SubmitWidget, '_submit', txt_submit, render_br=False)
	if txt_delete:
		form.add(SubmitWidget, '_delete', txt_delete, render_br=False)
	form.add(SubmitWidget, '_cancel', _("Cancel"), render_br=False)

	if not form.is_submitted() or form.has_errors():
		return render()
	checkConfig()
	if form.has_errors():
		return render()
	saveConfig()
	return request.redirect(exitPath)
