# -*- coding: iso-latin-1 -*-
#
# Copyright (C) 2005 by Holger Schurig
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


from Templates import *
from ConfigHelper import LabelWidget
from quixote.form2 import *
from quixote.html import htmlescape
import os, backend, configlets, panelutils


_q_parent  = 'page_config'
_q_title   = _("Write")
_q_desc    = _("Write configuration files")
_q_link    = 'write'
_q_menupos = 90
_q_level   = 3


def _q_access(request):
        if request.session.level < _q_level:
		cantAccessPage()


def _q_test():
	return os.access("/etc/asterisk", os.O_RDWR)



def tryToWriteConfig [plain] (configEntries):
	try:
		backend.createPythonConfig()
	except IOError:
		'<p>'
		group = 'asterisk' # TODO
		htmltext(_("Could not create /etc/asterisk/destar_cfg.py. Make sure the directory is writable for group %s") % group)
		'.</p>'

	errors = False
	for file,cnf,ok in configEntries:
		if ok:
			cnf.write()
		else:
			if not errors:
				htmltext(_("There are some config files from your previous configuration that weren't created by DeStar."))
				'<ul>'
				errors = True
			'<li>'
			'%s (<a href="../backup/%s">backup</a>)' % (file, file)
			'</li>'
	if errors:	
		'</ul><p>'
		htmltext(_("Because of this, I did not touch any of your config files."))
		'.</p>'
	else:
		'<p>'
		htmltext(_("Wrote configuration"))
		'.</p>'
	footer()


def showHtmlConfig [plain] (configEntries):
	'<div id="config">\n'
	for file, cfg, ok in configEntries:
		'\n<div id="configFile">'
		file
		'</div>\n'
		'<div id="configContents">\n'
		if cfg.destar_comment:
			configlets.CONF_TAG
			'<br>\n'
		for sect in cfg.order:
			if sect:
				'<div id="configSection">'
				'['
				sect
				']'
				'</div>\n'
			for l in cfg.sections[sect]:
				htmlescape(l)
				'<br>\n'
		'</div>\n'
	'</div>\n'




def _q_index [plain] (request):

	configEntries = backend.createAsteriskConfig(True)
	configEntries.sort()

	writeForm = Form(attrs={"id":"writeFrom"})
	writeForm.add(SubmitWidget, '_write', _("Write"))

	showForm = Form(attrs={"id":"showForm"})
	showForm.add(LabelWidget, '_label', title=_("Show configuration instead of writing"))
	for file,cnf,ok in configEntries:
		showForm.add(CheckboxWidget, file, False, title=file)
	showForm.add(SubmitWidget, '_show', _("Show"))

	if not writeForm.is_submitted() and not showForm.is_submitted():
		header(_(_q_desc))
		writeForm.render()
		showForm.render()

	if writeForm['_write']:
		header(_q_desc)
		tryToWriteConfig(configEntries)
	elif showForm['_show']:
		header(_("Configuration files"))
		entries = []
		for file,cnf,ok in configEntries:
			if showForm[file]:
				entries.append( (file,cnf,ok) )
		showHtmlConfig(entries)

	# Move the panel buttons file if present
	if panelutils.isConfigured():
		panelutils.moveButFile()
		panelutils.restartPanelDaemon()

	footer()
