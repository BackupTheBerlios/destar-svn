# -*- coding: iso-latin-1 -*-
#
# Copyright (C) 2004 by Holger Schurig
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


from Templates import *
from quixote.errors import AccessError
import ConfigUI as ui
import backend
#import sys, types, string

def menu(request):
	return [
		('Phones/',       'Edit Phones'),
		('TelCoLines/',   'Edit Telco Lines'),
		('Applications/', 'Edit Applications'),
		('Options/',      'Edit Options'),
		('',''),
		('write',         'Write config'),
		('reload',        'Reload asterisk'),
	]





class AddConfiglet:
	_q_exports = []


	def __init__(self):
		self.type = None


	def _q_index(self, request):
		if not self.type:
			return errorpage(_("Invalid URL"), menu)

		try:
			obj = backend.newConfiglet(self.type)
		except KeyError:
			return errorpage("%s %s" % (_("There is no configurable object with the name"),self.type), menu)
		return ui.configletsForm(request,
			obj,
			title = _("New") + " " + obj.shortName,
			exitPath = "../../" + obj.group,
			actionCallback=self.addit,
			new=True,
			menu=menu )


	def addit(self, obj):
		backend.addConfiglet(obj)


	def _q_lookup(self, request, type):
		self.type = type
		return self




class EditConfiglets:
	"""This class is invoked when a user invokes config/<group>/<id>/<action>.

	The 'group' is actually a don't care.
	The 'id' is the id of the configlet.
	'action' os what we want to do with the configlet
	"""

	
	_q_exports = ['edit','up','down']


	def __init__(self, component):
		self._id = component


	def _q_index(self, request):
		return errorpage( _("Action missing") )

	def edit(self, request):
		obj = backend.getConfiglet(id=self._id)
		if obj:
			return ui.configletsForm(request, obj, _(obj.shortName), menu=menu)
		else:
			return errorpage(_("Object does not exist"), menu)

	def up(self, request):
		if backend.moveConfigletUp(self._id):
			return request.redirect("..")
		else:
			return errorpage(_("Could not swap id's %s and %s") % (self._id-1,self._id))

	def down(self, request):
		if backend.moveConfigletDown(self._id):
			return request.redirect("..")
		else:
			return errorpage(_("Could not swap id's %s and %s") % (self._id,self._id+1))




class Groups:
	_q_exports = []


	def __init__(self, component):
		self.group = component
		self._id   = None


	def _q_index [html] (self, request):
		header(_(self.group), menu)

		cg = backend.getConfiglets(group=self.group)
		if cg:
			# Show currently defined configlets
			'<table>'
			'<tr>'
			'<th>E</th>'
			'<th>D</th>'
			'<th>U</th>'
			for f in cg[0].head():
				'<th>%s</th>' % _(f)
			'</tr>'
			n = 0
			for o in cg:
				'<tr>'
				'<td><a href="%s/edit"><img src="/pages/edit.gif" border="0" alt="Edit"></a></td>' % o._id
				if n<len(cg)-1:
					'<td><a href="%s/down"><img src="/pages/down.gif" border="0" alt="Move down"></a></td>' % o._id
				else:
					'<td>&nbsp;</td>'
				if n>0:
					'<td><a href="%s/up"><img src="/pages/up.gif" border="0" alt="Move up"></a></td>' % o._id
				else:
					'<td>&nbsp;</td>'
				wrap = True
				for f in o.row():
					if wrap:
						f = '<a href="%s/edit">%s</a>' % (o._id, f)
						wrap = False
					'<td>%s</td>' % f
				'</tr>'
				n = n + 1
			'</table>'

		# Show addable configlets:
		cg = backend.configletsList(self.group)
		cg.sort(lambda x,y: cmp(x.shortName,y.shortName) )
		head = False
		for o in cg:
			if not o.isAddable():
				continue
			if not head:
				'<div class="addmore"><h2>%s %s</h2><ul>' % (_("Add more"), self.group) 
				head = True
			'<li><a href="../add/%s">%s</a></li>' % (o.__name__, o.shortName)
		if head:
			'</ul></div>'
		
		footer()


	def _q_lookup(self, request, component):
		return EditConfiglets(component)



class BackupConfigFile:
	_q_exports = []


	def _q_index [html] (self, request):
		return ErrorPage(_("File name missing"))

	def _q_lookup(self, request, component):
		#print "--> backup", component
		res = backend.backupAsteriskConfig(component)
		if not res:
			return errorpage(_("I had a problem backing up %s") % component)
		return request.redirect("../write")




_q_exports = ['write', 'reload']


def _q_index [html] (request):
	header(_('Configuration'), menu)
	ui.configurationTips(request)
	if ui.tipped:
		ui.showConfigurables(_('Other things you can configure:'))
	else:
		ui.showConfigurables(_('You can configure the following things'))
	footer()


def write [html] (request):
	header(_("Write configuration"), menu)
	backend.createPythonConfig()
	files = backend.createAsteriskConfig()
	if files:
		ui.showConfigFilesThatNeedBackup(files)
	else:
		'<p>'
		_("Wrote configuration")
		'.</p>'
	footer()



def reload [html] (request):
	header(_("Reloading Asterisk"), menu)
	'<p>'
	_('Not yet implemented')
	'</p>'
	footer()


def _q_lookup(request, component):
	#print "lookup component", component
	if component == 'add':
		return AddConfiglet()
	elif component == 'backup':
		return BackupConfigFile()

	return Groups(component)


def _q_access(request):
	if request.session.level < 3:
		raise AccessError("You don't have access to configuration.")
