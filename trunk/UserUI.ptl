# -*- coding: iso-latin-1 -*-
#
# Copyright (C) 2004 by Holger Schurig
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


from Templates import *
from language import _
from quixote.form2 import *
import configlets, backend, manager
import time, copy


def phoneSettingsForm(request, obj, menu, exitPath=".."):
	if request.form.has_key('_cancel'):
		return request.redirect(exitPath)
	form = Form()

	vm   = int(manager.getVar('VM',   obj.ext, True))
	dnd  = int(manager.getVar('DND',  obj.ext, False))
	dsec = int(manager.getVar('DSEC', obj.ext, 45))
	cfim = manager.getVar('CFIM', obj.ext, '')
	cfbs = manager.getVar('CFBS', obj.ext, '')

	phones = backend.getChoice(clazz="CfgPhone")
	phones.remove( (obj.name,obj.name) )
	phones.insert(0, ('',''))

	form.add(CheckboxWidget,     "dnd",  dnd,          title=_("Enable 'do not disturb'"))
	form.add(SingleSelectWidget, "cfim", cfim, phones, title=_("Immediate call forwarding to"))
	form.add(IntWidget,          "dsec", dsec,         title=_("Seconds of ring time"), maxlength=3, size=3)
	form.add(SingleSelectWidget, "cfbs", cfbs, phones, title=_("Forward call when busy/unavailable to"))
	form.add(CheckboxWidget,     "vm",   vm,           title=_("Use voice mailbox"))
	form.add(SubmitWidget, '_submit', _("Submit"), render_br=False)
	form.add(SubmitWidget, '_cancel', _("Cancel"), render_br=False)

	if not form.is_submitted() or form.has_errors():
		return form.render()

	manager.setVar('VM',   obj.ext, form['vm'])
	manager.setVar('DND',  obj.ext, form['dnd'])
	manager.setVar('DSEC', obj.ext, form['dsec'])
	s = form['cfim'] or ''
	print "CFIM:", s
	manager.setVar('CFIM', obj.ext, form['cfim'] or '')
	manager.setVar('CFBS', obj.ext, form['cfbs'] or '')

	return request.redirect(exitPath)



def phoneState [html] (obj):
	(phones, other) = backend.determineStateOfPhones()
	
	state = copy.copy(obj._state.__dict__)

	# TODO: use CSS
	'<table border=1 cellpadding=2 cellspacing=0>'

	try:
		'<tr><td>%s:</td><td>%s</td></tr>' % ( _('State'), _(state['State']) )
		del state['State']
	except KeyError:
		pass

	# Last updated
	try:
		t = state['LastUpdate']
		if t:
			'<tr><td>%s:</td><td>%s</td></tr>' % ( _('Last updated'), backend.time2HMS(time.time()-t))
		del state['LastUpdate']
	except KeyError:
		pass

	# TODO: Hangup cause

	'<tr><td>%s:</td><td>%s</td></tr>' % ( _('Name'), obj.name)

	'<tr><td>%s:</td><td>%s</td></tr>' % ( _('Extension'), obj.ext)

	try:
		'<tr><td>%s:</td><td>%s</td></tr>' % ( _('Registration status'), _(state['PeerStatus']) )
		del state['PeerStatus']
	except KeyError:
		pass

	try:
		'<tr><td>%s:</td><td>%s</td></tr>' % ( _('Channel ID'), _(state['Channel']) )
		del state['Channel']
	except KeyError:
		pass

	try:
		'<tr><td>%s:</td><td>%s</td></tr>' % ( _('Called extension'), _(state['Extension']) )
		del state['Extension']
	except KeyError:
		pass

	try:
		'<tr><td>%s:</td><td>%s(%s)</td></tr>' % ( _('Application'), state['Application'], state['AppData'] )
		del state['Application']
		del state['AppData']
	except KeyError:
		pass

	try:
		'<tr><td>%s:</td><td>%s</td></tr>' % ( _('Context'), _(state['Context']) )
		del state['Context']
	except KeyError:
		pass

	try:
		'<tr><td>%s:</td><td>%s</td></tr>' % ( _('Caller ID'), _(state['Callerid']) )
		del state['Callerid']
	except KeyError:
		pass

	k = state.keys()
	if k:
		'<tr><td>%s</td><td>' % _("Other state")
		k.sort()
		for s in k:
			if s in ['Event', 'Peer', 'Cause', 'Priority', 'Uniqueid']: continue
			val = state[s]
			'%s: %s<br />' % (s, val)

		'</td></tr>'

	'</table>'




def loginForm(request, menu, exitPath="."):

	if request.form.has_key('_cancel'):
		return request.redirect(exitPath)
	form = Form()

	form.add(StringWidget, "name",  "",  title=htmltext(_("User or phone name/number")), required=True)
	form.add(StringWidget, "pw",    "",  title=htmltext(_("Password or PIN")),           required=True)
	form.add(SubmitWidget, '_submit', _("Submit"), render_br=False)
	form.add(SubmitWidget, '_cancel', _("Cancel"), render_br=False)

	if not form.is_submitted() or form.has_errors():
		return form.render()

	return (form['name'], form['pw'])


def notLoggedIn [html] (request):
	'<p>'
	_('Invalid username or password')
	'</p>'


def loggedIn [html] (request):
	'<p>'
	if request.session.user:
		_('You are now logged in as user')
		" '<b>"
		request.session.user
		"</b>'. "
		_("Your access level is")
		" %d." % request.session.level
	else:
		_("You are not logged in.")
	' '
	_('You can do')
	":</p><ul>"
	if request.session.level >= 0:
		"<li>"
		_('access all public accessible info pages')
		"</li>"
	if request.session.level >= 1 and request.session.phone:
		"<li>"
		_('change your personal phone settings')
		"</li>"
	if request.session.level >= 2:
		"<li>"
		_('change phone settings of other people')
		"</li>"
	if request.session.level >= 3:
		"<li>"
		_('configure the PBX')
		"</li>"
	if request.session.level >= 4:
		"<li>"
		_('access debug pages to help program DeStar')
		"</li>"
	"</ul><p>"
	_("Have fun!")
	"</p>"
	



def pbxState [html] ():
	manager.connect()
	if not manager.isConnected():
		'<p>Asterisk is <span class="errornotice">not</span> running!</p>'
	elif not manager.isLoggedIn():
		# TODO: describe how to set this up
		'<p>The manager access is <span class="errornotice">not</span> working!</p>'

	(phones,other) = backend.determineStateOfPhones()

	maxy = 8
	h = HtmlTable(1,1)
	now = time.time()

	x = y = 0
	for obj in phones:
		#print obj.name
		if obj.technology == "virtual":
			continue

		#id = '<a href="%d/state">%s</a>' % (obj._id, ' '.join(obj.row()[1:]) )

		h.setCell(x,y, formatChannel(obj, now) )
		h.setAttr(x,y, id="phone")

		y = y + 1
		if y>=maxy:
			x = x + 1
			y = 0

	#x = x + 1
	#y = 0
	#for c in manager.channels:
	#	chan = manager.normalizeChannel(c)
	#	if lookupPhone(phones, chan):
	#		continue
		
	#	res = formatChannel(chan,c,now)
	#	#print chan,res
	#	if not res:
	#		continue
	#	h.setCell(x,y, res )
	#	h.setAttr(y,y, id="line")

	#	y = y + 1
	#	if y>=maxy:
	#		x = x + 1
	#		y = 0

	h.getHtml(id='state', border=1)




def formatChannel(obj, now):

	# +------------------------------+
	# | Nr Name         Voicemailbox |
	# | Number                       |
	# | Timer                 Status |
	# +------------------------------+

	id = '<a href="%s/state">%s</a>' % (obj._id, ' '.join(obj.row()[1:]) )

	number = '&nbsp;'
	try:
		number = obj._state.Extension
		try:
			number = "%s %s" % (number, obj._state.Application)
		except AttributeError:
			pass
		number = "> " + number
	except AttributeError:
		pass
	#try:
	#	number = manager.normalizeChannel(obj._state.Link)
	#	p = lookupPhone(phones,number)
	#	if c.__dict__.has_key('Application'):
	#		number = "> " + ' '.join(p.row()[1:])
	#	elif c.__dict__.has_key('Callerid'):
	#		number = "< " + c.Callerid
	#except AttributeError:
	#	pass

	
	t = obj._state.LastUpdate
	if t:
		t = now -t + 1
		ti = backend.time2HMS(t)
	else:
		ti = ''

	if obj._state.State in ['Hangup','Registered','Reachable','Unknown'] and t>30:
		ti = ''

	return htmltext('<span id="phonename">%s</span><br />%s<br />%s&nbsp;<span id="phonestate">%s</span>' % (id, number, ti, _(obj._state.State)))
