# -*- coding: iso-latin-1 -*-
#
# Copyright (C) 2005 by Holger Schurig
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


from Templates import *
import sys, os, quixote, backend
from quixote.util import StaticDirectory


_q_exports = ['pages']
_q_parent  = ''
_q_title   = _("Main menu")
_q_level   = 0


def _q_access(request):
        if request.session.level < _q_level:
		cantAccessPage()



#######################################################################
#
# This boilerplate is only in main_page.ptl. It automatically loads
# all page_*.py/page_*.ptl files and creates a hierarchical menu with
# them. For this it needs this variables in each page_*-module.
#
#    _q_link    = 'blah'             # link name for the page
#    _q_title   = 'Some title'       # must be present, if it is '', then no menu
#                                    # entry will be generated
#    _q_desc    = 'Long description' # may be empty
#    _q_level   = 3                  # access level needed for the page
#    _q_parent  = 'page_blah'        # this means: we should be put into
#                                    # page_blah's menu
#    _q_exports = []                 # may contain local things, but will be
#                                    # automatically created/populated
#    _q_menu    = []                 # will be automatically created/populated
#    def _q_index(request):          # the method that will generate the web page
#    def _q_test():                  # option, if this func return False, then
#                                    # the menu entry won't be generated
#	
#######################################################################





# Import all cfg_*.py files once when the module loads.
for s in os.listdir(backend.CONFIGLETS_DIR):
        if not s.startswith('page_'):
		continue
	m = None
        if s.endswith('.ptl'):
		s= s[:-4]
		#print "Importing", s
		m = __import__(s)
        elif s.endswith('.py'):
		s = s[:-3]
		#print "Importing", s
		m =  __import__(s)
	if m:
		for a in ('_q_parent', '_q_title', '_q_access'):
			if not m.__dict__.has_key(a):
				print "Error: '%s' doesn't define %s" % (s,a)
				sys.exit(1)

		# instantiate eventually missing variables
		if not m.__dict__.has_key('_q_menu'):
			m.__dict__['_q_menu'] = []
		if not m.__dict__.has_key('_q_exports'):
			m.__dict__['_q_exports'] = []
		if not m.__dict__.has_key('_q_desc'):
			m.__dict__['_q_desc'] = ''
		if not m.__dict__.has_key('_q_level'):
			m.__dict__['_q_level'] = 4
		if not m.__dict__.has_key('_q_link'):
			m.__dict__['_q_link'] = s[5:]
		
# Build the menu structure for all page modules
for s in sys.modules:
	if not s.startswith('page_'):
		continue
	if s == 'page_main':
		continue
	
	this_mod = sys.modules[s]
	if this_mod.__dict__.has_key('_q_test') and not this_mod._q_test():
		continue


	try:
		parent_mod = sys.modules[this_mod._q_parent]
	except KeyError:
		print "Note: %s does not exist, menu is now garbled" % this_mod._q_parent
		parent_mod = sys.modules['page_main']
	s = s[5:]	# strip 'page_'

	#print s
	#print "this:", this_mod
	#print "parent:", parent_mod

	# Append module to parent's menu and export-list
	link = this_mod._q_link
	#parent_mod._q_menu.append( (link, this_mod._q_title, this_mod._q_desc, this_mod._q_level, this_mod))
	if this_mod._q_title:
		parent_mod._q_menu.append( this_mod )
	parent_mod._q_exports.append( link )
	# Make this module known in the parent's module namespace
	parent_mod.__dict__[link] = this_mod
	# 'Convert' the _q_parent from type String to type Module
	this_mod.__dict__['_q_parent'] = parent_mod


def _q_exception_handler [plain] (request, exc):
        if isinstance(exc, quixote.errors.AccessError) or isinstance(exc, quixote.errors.PublishError):
	        if (exc.title == "Access denied"):
			header(htmltext(_('Access Denied')))
			'<p>'
			htmltext(_("You don't have access to this page."))
			'</p>'
			footer()
		else:
			header(_(exc.title))
			'<p>'
			_(exc.public_msg)
			'</p>'
			footer()
        else:
		raise exc




#######################################################################
#
# End of boilerplate, now comes the contents of 'page_main':
#
#######################################################################




# Our main page
def _q_index [plain] (request):
	header(_q_title)
	'Test'
	footer()


# Out static things like images and style-sheets:
pages = StaticDirectory(os.path.abspath(os.getenv('STATICPAGES_DIR','pages')), list_directory=1)
# pages = StaticDirectory(os.path.abspath(os.getenv('STATICPAGES_DIR','pages')), list_directory=1, cache_time=60*60)
