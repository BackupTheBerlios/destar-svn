# -*- coding: iso-latin-1 -*-
#
# Copyright (C) 2004 by Holger Schurig
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


from Templates import *
from language import _
import UserUI as ui
from quixote.errors import AccessError, PublishError
import backend, manager
import types

manager.connect()

def menu(request):
	a = [ ('pbxstate', _('Asterisk state')) ]

	if request.session.level:
		a.append( ('info', _('User info')) )
		
	if request.session.phone:
		phone = backend.getConfiglet(name=request.session.phone)
		if phone:
			a.append( ('%d/state' % phone._id, _('Phone state')) )
			if manager.isLoggedIn():
				a.append( ('%d/settings' % phone._id, _('Phone settings')) )

	return a


class HandlePhones:
	"""This class contains operations on phone configlets, all URLs to
	the methods have the form

		user/<id>/<method>

	The checks if <id> is an accessible phone object has to be done before
	calling methods of this class.
	"""

	_q_exports = ['state', 'settings']


	def __init__(self, obj):
		"""Stores the object id of the phone to handle"""
		self.obj = obj


	def _q_index(self, request):
		return errorpage(_("Invalid URL", menu))


	def settings [html] (self, request):
		header("%s for %s" % (_('Phone settings'), self.obj.name), menu)
		ui.phoneSettingsForm(request, self.obj, menu)
		footer()


	def state [html] (self, request):
		header("%s for %s" % (_('Phone status'), self.obj.name), menu)
		ui.phoneState(self.obj)
		footer()
		

 
_q_exports = ['pbxstate', 'login', 'logout', 'info']

def _q_index [html] (request):
	header(_('User functions'), menu)
	'<p>'
	_('This menu will contain all sorts of phone user specific stuff:')
	'</p>'
	'<ul>'
	for s in (_('Phone status (number of voicemails, call forwarding etc)'),
		  _('Set DND (do-not-disturb)'),
		  _('Set CFIM (call-forwarding)'),
		  _('Set CFBS (call-forward if busy/unavailable)'),
		  _('See last n calls made'),
		  _('See last n calls received'),
		  _('Maintain personal phone directory'),
		  _('Initiate call from the web'),
		  _('Maintain voice mailbox (listen, delete, forward, change texts)'),
	):
		'<li>'
		s
		'</li>'
	'</ul>'
	footer()
	
def pbxstate [html] (request):
	header(_('PBX State'), menu, 10)
	ui.pbxState()
	footer()


def login [html] (request):
	header(_('Login'), menu)
	res = ui.loginForm(request, menu)

	if type(res) != types.TupleType:
		res
	else:
		# First search for a user entry
		for obj in backend.getConfiglets(name="CfgOptUser"):
			if obj.name==res[0] and obj.secret==res[1]:
				request.session.user  = obj.name
				request.session.level = int(obj.level)
				request.session.phone = obj.phone
				return request.redirect(str('info'))

		# Now search for a phone entry with proper extension/voicemail pin
		for obj in backend.getConfiglets(group="Phones"):
			if (obj.ext==res[0] or obj.name==res[0]) and obj.pin==res[1]:
				request.session.user  = obj.name
				request.session.level = 1
				request.session.phone = obj.name
				return request.redirect(str('info'))
		ui.notLoggedIn(request)
	footer()


def info [html] (request):
	header(_('Logged in'), menu)
	ui.loggedIn(request)
	footer()
	

def logout(request):
	# TODO: move this into Publisher.py
	request.session.user = ''
	request.session.phone = ''
	request.session.level = 0
	return request.redirect('/')


def _q_lookup(request, id):
	#print "lookup component", id
	obj = backend.getConfiglet(id)
	if not obj:
		return errorpage("Invalid URL", menu)
	if obj.group != "Phones":
		#return errorpage(, menu)
		raise PublishError( _("Wrong phone id") )
	return HandlePhones(obj)
