package Dahdi::Config::Gen::Destar;
#
# This file was written by Alejandro Rios <alerios@debian.org>
# Based on Dahdi's perl_modules by Oron Peled <oron@actcom.co.il>
# Copyright (C) 2007, Xorcom
# This program is free software; you can redistribute and/or
# modify it under the same terms as Perl itself.
#

use strict;

use Dahdi::Config::Gen qw(is_true);

sub new($$$) {
	my $pack = shift || die;
	my $gconfig = shift || die;
	my $genopts = shift || die;
	my $file = $ENV{DESTAR_FILE} || "/etc/asterisk/destar_channels.py";
	my $self = {
			FILE	=> $file,
			GCONFIG	=> $gconfig,
			GENOPTS	=> $genopts,
		};
	bless $self, $pack;
	return $self;
}

# Since chan_dahdi definitions "leak" to the next ones, we try
# To reset some important definitions to their chan_dahdi defaults.
my %destar_defaults = (
        group    => '"1"',
);

sub reset_destar_values {
	foreach my $arg (@_) {
		if (exists $destar_defaults{$arg}) {
			print "\t$arg = $destar_defaults{$arg},\n";
		} else {
			print "\t$arg = None,\n";
		}
	}
}

sub gen_openr2($$$) {
	printf "#coming soon\n";
}

sub gen_cas($$$) {
	printf "#coming soon\n";
}

sub gen_digital($$$) {
	my $self = shift || die;
	my $gconfig = shift || die;
	my $span = shift || die;
	my $num = $span->num() || die;
	die "Span #$num is analog" unless $span->is_digital();
	if($span->is_pri && $gconfig->{'pri_connection_type'} eq 'R2') {
		printf "; Skipped: $gconfig->{'pri_connection_type'}\n\n";
		return;
	}
	my $type = $span->type() || die "$0: Span #$num -- unkown type\n";
	my $termtype = $span->termtype() || die "$0: Span #$num -- unkown termtype [NT/TE]\n";
	my $group = $gconfig->{'group'}{"$type"};
	my $context = $gconfig->{'context'}{"$type"};
	my @to_reset = qw/context group/;

	die "$0: missing default group (termtype=$termtype)\n" unless defined($group);
	die "$0: missing default context\n" unless $context;

	my $sig = $span->signalling || die "missing signalling info for span #$num type $type";
	grep($gconfig->{'bri_sig_style'} eq $_, 'bri', 'bri_ptmp', 'pri') or die "unknown signalling style for BRI";

	if($span->is_bri() and $gconfig->{'bri_sig_style'} eq 'bri_ptmp') {
		$sig .= '_ptmp';
	}

	printf "CfgTrunkDAHDIPRI(\n";
	printf "\tname = \"Span_%d\",\n", $span->num, $span->name, $span->description;
	printf "\tdescription = \"%s\",\n", $span->name;
	if ($span->is_bri() && $termtype eq 'NT' && is_true($gconfig->{'brint_overlap'})) {
		print "\toverlapdial = True\n";
		push(@to_reset, qw/overlapdial/);
	}

	printf "\tswitchtype = \"%s\",\n", $span->switchtype;
	printf "\tsignalling = \"%s\",\n", $sig;
	printf "\tchannels = \"%s\",\n", Dahdi::Config::Gen::bchan_range($span);
	reset_destar_values(@to_reset);
	printf "\t)\n";
}

sub gen_channel($$) {
	printf "#coming soon\n";
}

sub generate($) {
	my $self = shift || die;
	my $file = $self->{FILE};
	my $gconfig = $self->{GCONFIG};
	my $genopts = $self->{GENOPTS};
	#$gconfig->dump;
	my @spans = @_;
	warn "Empty configuration -- no spans\n" unless @spans;
	rename "$file", "$file.bak"
		or $! == 2	# ENOENT (No dependency on Errno.pm)
		or die "Failed to backup old config: $!\n";
	print "Generating $file\n" if $genopts->{verbose};
	open(F, ">$file") || die "$0: Failed to open $file: $!\n";
	my $old = select F;
	printf "# Autogenerated by $0 on %s\n", scalar(localtime);
        print  "# If you edit this file and execute $0 again,\n";
        print  "# your manual changes will be LOST.\n";
        print <<"HEAD";
# Destar's Dahdi Channels Configurations (destar_channels.py)
#
# This is not intended to be a complete destar_cfg.py. Rather, it is intended
# to be loaded at runtime by destar to provide autodetection for Dahdi trunks.
#

HEAD
	foreach my $span (@spans) {
		printf "# Span %d: %s %s\n", $span->num, $span->name, $span->description;
		if($span->is_digital) {
			if($span->is_pri) {
				if($gconfig->{'pri_connection_type'} eq 'R2') {
					$self->gen_openr2($gconfig, $span);
				} elsif($gconfig->{'pri_connection_type'} eq 'CAS') {
					$self->gen_cas($gconfig, $span);
				} else {
					$self->gen_digital($gconfig, $span);
				}
			} elsif($span->is_bri) {
				$self->gen_digital($gconfig, $span);
			}
		} else {
			foreach my $chan ($span->chans()) {
				$self->gen_channel($chan);
			}
		}
		print "\n";
	}
	close F;
	select $old;
}

1;

__END__

=head1 NAME

destar - Generate DeStar's configuration for chan_dahdi channels.

=head1 SYNOPSIS

 use Dahdi::Config::Gen::Destar;

 my $cfg = new Dahdi::Config::Gen::Destar(\%global_config, \%genopts);
 $cfg->generate(@span_list);

=head1 DESCRIPTION

Generate the F</etc/asterisk/destar_channels.py>
This is used as a configuration for destar(1) at runtime.

Its location may be overriden via the environment variable 
C<DESTAR_FILE>.
