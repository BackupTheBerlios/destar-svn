# -*- coding: iso-latin-1 -*-
#
# Copyright (C) 2005 by Holger Schurig
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

# ToDo:
# - improve the appearance and usability
# - show the "navigation" buttons only when they are needed
# - use the current date in the "To:" option
# - glosary of the CDR terms, see README.cdr of asterisk

# - improve the code and change the name of some variable
# - ...


from Templates import *
from quixote.form2 import *
import cdrutils
import time


_q_parent = 'page_admin'
_q_title  = _("Call Details")
_q_desc   = _("Get statistics about made and received calls")
_q_level  = 2


def _q_access(request):
        if request.session.level < _q_level:
		cantAccessPage()


def _q_test():
	return cdrutils.db

def     generateYearsNumbers():
        years = range(2004,time.localtime()[0]+1)
        return years

def	generateMonthsNumbers():
	months = range(1,13)
	for i in range(0,9) :
		months[i] = "0%s" % months[i]
	return months

def	generateDaysNumbers():
	days = range(1,32)
	for i in range(0,9) :
		days[i] = "0%s" % days[i]
	return days
	
def 	generateOptionSelect(text=False):
	option = range (0,110,10)
	if text:
		option[0]=_("All")
	return option

fields=[('src',_("Source")),
	('dst',_("Destination")),
	('answer',_("Time_of_answer")),
	('billsec',_("Duration")),
	('disposition',_("Result")),
	('accountcode',_("Cost_per_Minute"))]

operands=['=','<>','<=','<','>=','>']
	
def cdrForm [plain] (request, srcextension="", dstextension="", duration="" ):

	monthsnumbers = [ '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12' ]
	monthsnames = [ _('January'), _('February'), _('March'), _('April'), _('May'), _('June'), _('July'), _('August'), _('September'), _('October'), _('November'), _('December') ]

	localtime = time.localtime()
	
	localyear = localtime[0]
	
	# fix the month value for those smaller than 10 (january ... september) 1 -> 01, 2 ->02 
	if localtime[1] < 10:
		localmonth = '0%s' % localtime[1] 
	else:
		localmonth = localtime[1]
	
	#the same for the day
	if localtime[2] < 10:
		localday = '0%s' % localtime[2]
	else:
		localday = localtime[2]

	form = Form()
	
	form.add(StringWidget, "srcextension",  "%s" % srcextension, title=htmltext(_("Source ")),hint=htmltext(_("Wildcards: % is the 'zero or more characters' wildcard, and _ is the 'exactly one character' wildcard")), render_br=True )
	form.add(StringWidget, "dstextension",  "%s" % dstextension, title=htmltext(_("Destination")),hint=htmltext(_("You can use the same wildcards as above")), render_br=True)
	form.add(OptionSelectWidget, "durationoperand",  "%s" % duration, title=htmltext(_("Duration")), options=zip(operands,operands,operands),render_br=False)
	form.add(StringWidget, "duration",  "%s" % duration, hint=htmltext(_("In seconds")),render_br=True)
	form.add(OptionSelectWidget,'linesToShow', title=_('Number of records to show:'),options=zip( generateOptionSelect(), generateOptionSelect(text=True), generateOptionSelect() ), value=20)	
	form.add(OptionSelectWidget, 'orderby', title=_('Order by:'),options=fields, render_br=False,value='answer')	
	form.add_radiobuttons('order', title=_(''),options=[('DESC',_("Desc.")),('ASC',_("Asc."))],value='DESC')	
	form.add_checkbox('searchBetweenDates',title= _("Search between the following dates"), render_br=True)

	form.add_single_select('fromyear', title=htmltext(_('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Start:')), value="", options=zip( generateYearsNumbers(), generateYearsNumbers() ), render_br=False )
	form.add_single_select('frommonth', options=zip( generateMonthsNumbers(), monthsnames, generateMonthsNumbers() ), render_br=False )
	form.add_single_select('fromday', options=zip( generateDaysNumbers() , range(1,32), generateDaysNumbers() ), render_br=True )
	
	form.add_single_select('toyear', value=localyear, title=htmltext(_('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End:')), options=zip( generateYearsNumbers(), generateYearsNumbers() ), render_br=False)
	form.add_single_select('tomonth', value=localmonth, options=zip( generateMonthsNumbers(), monthsnames, generateMonthsNumbers() ), render_br=False)
	form.add_single_select('today', value=localday, options=zip( generateDaysNumbers() , range(1,32), generateDaysNumbers()  ), render_br=True)
	

	form.add(SubmitWidget, '_submit', _("Search"), render_br=True)
	form.add(SubmitWidget, '_newest', htmltext("|<"), render_br=False)
	form.add(SubmitWidget, '_newer', htmltext("<<"), render_br=False)
	form.add(SubmitWidget, '_older', htmltext(">>"), render_br=False)
       	form.add(SubmitWidget, '_oldest', htmltext(">|"), render_br=False)

	where = []
	
	def render [html] ():

		name = form.get_submit()
		
		cursor = cdrutils.count(where = where)
		total = cursor

		global q
		global p

		p = form["linesToShow"]
		
		if p == 0:
			p = total
		
		if (name == True or name == '_submit' or name == '_newest'): 
			q = 0
	
		elif name == '_newer': 
			q = q-form["linesToShow"]
			if q < 0:
				q=0
							
					
		elif name == '_older': 
			if q >= total:
				q = total - total % p
			else:
				q+=form["linesToShow"]
			
		elif name == '_oldest': 
			q = total - total % p
			
		elif p == total:
			q = 0
		else : 
			p = 20
			q = 0
		
			
		form.render()
		cdrShowResults(where, p, q, total,form["orderby"],form["order"])

	if not form.is_submitted() or form.has_errors():
		return render()
	
	if form["srcextension"]:
		where.append("src like '%s'" % form["srcextension"])
	if form["dstextension"]:
		where.append("dst like '%s'" % form["dstextension"])
	if form["duration"]:
		where.append("billsec %s '%s'" % (form["durationoperand"],form["duration"]))
			
	if form["searchBetweenDates"]:
	
		fromdate = "%s-%s-%s" % (form["fromyear"], form["frommonth"], form["fromday"])
		where.append ("date(start) >= date('%s')" % fromdate )
	
		todate = "%s-%s-%s" % (form["toyear"], form["tomonth"], form["today"])
		where.append ("date(end) <= date('%s')" % todate)
	
	return render()

def	cdrShowResults [html] (where=[], limit, offset, total = 0, field="answer", order="DESC"):
	if total == 0:
		'<p>'	
		'--No records to Show--'
		'</p>'	
	else:
		orderby = '%s %s' % (field, order)	
		cursor = cdrutils.select(order=[str(orderby)], where = where, limit = limit, offset = offset)
	
		totalcost = 0
		totalmin = 0
		
		row = cursor.fetchone()
		if row and int(offset) >= 0 and int(offset) <= total:
		
			f = offset + limit
			'<p>'	
			if total >= f:		
				_('Showing records from %s to %s of %s <br><br>') % (offset+1, f, total)
			else:
				_('Showing records from %s to %s of %s <br><br>') % (offset+1, total, total)
			'</p>'	
					
                	'<table border="1" cellspacing="1"><thead><tr>'
                	for s in row.keys():
				'<th>'
				_(s)
				'</th>'
			'<th>'
			_('Duration_in_minutes')
			'</th>'
			'<th>'
			_('Cost_of_call')
			'</th>'
                	'</tr></thead><tbody>'
		
                	while row:
	                	'<tr>'
				items = row.items()
                        	for c,s in items:
					if c==_("Result") and s==4:
						s=_("Answered")
					if c==_("Result") and s==1:
						s=_("Not answered")
					if c==_("Result") and s==3:
						s=_("Busy")
					if c==_("Result") and s==2:
						s=_("Failed")
					if c==_("start"):
						finalDate=s
					if c==_("Duration"):
						if not s:
							s = 0
						s = int(s)
						min = (s % 60) and ((s / 60) + 1) or (s / 60)
						totalmin += min
					if c==_("Cost_per_Minute"):
						if not s:
							s=0
						s = int(s)
						costpm = s
					'<td><center>'
					if s=="1969-12-31 19:00:00":
						'-'
					else: 
						s
        	                       	'</center></td>'
				'<td><center>'
				min
				'</center></td>'
				'<td><center>'
				cost = min * costpm
				totalcost += cost
				cost
				'</center></td>'
				'</tr>'

				row = cursor.fetchone()
                	'</tbody></table><br/>'
		'<p>'	
		_('Total Duration of shown calls: %s min.' % totalmin)
		'</p>'	
		'<p>'	
		_('Total Cost of shown calls: %s' % totalcost)
		'</p>'	

def _q_index [plain] (request):
	header(_q_desc)
	cdrForm(request)
	footer()
