# -*- coding: iso-latin-1 -*-
#
# Copyright (C) 2005 Manuel Alejandro Cer√≥n Estrada <ceronman@gmail.com>
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# TODO:
# 	- Improve security with server side validations
#   - Improve graphics
#	- Maybe merge all per* functions in one
#	- Put ordering links in the result tabl 
#	- Put an option to hide zero values
#	- Delete graphic files after it use

from Templates import *
from quixote.form2 import *
from pychart import *
import cdrutils
import time
import backend

_q_parent = 'page_admin'
_q_title  = _("Reports")
_q_desc   = _("Statistics")
_q_level  = 2

def _q_access(request):
	if request.session.level < _q_level:
		cantAccessPage()
		
startyear = 2004
		
all = _("All")

years = ["%d"%i for i in range(startyear,time.localtime()[0]+1)]  
months = ["%02d"%(i+1) for i in range(12)]
days = ["%02d"%(i+1) for i in range(31)]
hours = ["%02d"%i for i in range(24)]

yearnames = years
monthnames = [ _('January'), _('February'), _('March'),
				_('April'),	_('May'), _('June'), _('July'), _('August'), 
				_('September'), _('October'), _('November'), _('December') ]
daynames = ["%d"%(i+1) for i in range(31)]
hournames =["%d:00"%i for i in range(24)] 
		
def makeForm():
	
	#Form Data Generation
	form = Form()
	form.name = "queryform"
	form.add_single_select('year', 
							title=htmltext(_('Day:')),
							value="",
							options=zip([all] + years, 
										[all] + years),
							render_br=False )
							
	form.add_single_select('month', 
							options=zip([all] + months, 
										[all] + monthnames,
										[all] + months),
							render_br=False )
							
	form.add_single_select('day',
							options=zip([all] + days,
										[all] + daynames,
										[all] + days),
							render_br=True )
							
	form.add(SubmitWidget, '_submit', _("Submit"), render_br=True)
	
	return form
	
def makeTable [html] (label, calls, minutes, names):
	'<table border="1"> \n'
	'<tr> <td>'+ label
	'</td><td>'+_("Number of Calls")
	'</td><td>'+_("Minutes")
	#'</td><td>'+_("Cost") + '</td></tr>\n'
	for i in range(len(calls)):
		'<tr>'
		"<td>%s</td>" % names[i]
		"<td>%d</td>" % calls[i]
		"<td>%d</td>" % minutes[i]
		#"<td>%s</td>" % _("Not yet Implemented")
		'</tr>\n'
	'</table>'

def makeGraphics [plain] (names, values, title, labelx, labely, filename):
	theme.use_color = True;
	theme.default_font_size = 14
	theme.reinitialize()
	
	can = canvas.init("/tmp/%s" % filename, "png")
	
	interval = max(values) // 6
		
	data = zip(names, values)
	print data
	
	
	chart_object.set_defaults(area.T, 
								size = (640, 480),
								x_coord = category_coord.T(data, 0))
	
	chart_object.set_defaults(bar_plot.T,
								width = 15,
								data = data)
	
	ar = area.T(x_axis=axis.X(label=labelx),
				y_axis=axis.Y(label=labely, tic_interval=interval))
	
	plot1=bar_plot.T(label=labely, hcol=1)
	ar.add_plot(plot1)
	ar.draw(can)
	can.close()
	
	htmltext('<p>')
	htmltext(title)
	htmltext('<br>') 
	htmltext('<img alt="table" src="/graphs/%s">' % filename)
	htmltext('</p>')
			
def perHourInDay [plain] (day, month, year):
	
	date = "%s-%s-%s" % (year, month, day)
	where = []
	where.append("date(start) = date('%s')" % date)
	totalsec = 0
	cursor = cdrutils.select(fields=['time(start)', 'billsec'], where = where)
	row = cursor.fetchone()
	mins_per_hour =   [0 for i in hours]
	calls_per_hour = [0 for i in hours]
	
	while row:
		for c,s in row.items():
			if c=='time(start)':
				hour = s.split(":")
				hour = int(hour[0])
			if c=='billsec':
				minutes = int(s)
				if minutes > 0:
					minutes = minutes/60 + 1
				mins_per_hour[hour] += minutes
				calls_per_hour[hour] += 1
		row = cursor.fetchone()
		
	makeTable(_("Time"), calls_per_hour, mins_per_hour, hournames)
	makeGraphics(range(24), calls_per_hour, _("Calls per Hour in a Day"),_("Hours"), _("Calls"), "graph1.png")
	makeGraphics(range(24), mins_per_hour, _("Minutes per Hour in a Day"),_("Hours"), _("Minutes"), "graph2.png")
	
def perDayInMonth [plain] (month, year):
	
	date1 = "%s-%s-01" % (year, month)
	date2 = "%s-%s-31" % (year, month)
	where = []
	where.append("date(start) between date('%s') and date('%s')" % (date1, date2))
	cursor = cdrutils.select(fields=['date(start)', 'billsec'], where = where)
	row = cursor.fetchone()
	mins_per_day =  [0 for i in days]
	calls_per_day = [0 for i in days]
	
	while row:
		for c,s in row.items():
			if c=='date(start)':
				day = s.split("-")
				day = int(day[2]) - 1
				
			if c=='billsec':
				minutes = int(s)
				if minutes > 0:
					minutes = minutes/60 + 1
				mins_per_day[day] += minutes
				calls_per_day[day] += 1
		row = cursor.fetchone()
		
	makeTable(_("Day"), calls_per_day, mins_per_day, daynames)
	makeGraphics(daynames, calls_per_day, _("Calls per Day in a Month"), _("Days"), _("Calls"), "graph1.png")
	makeGraphics(daynames, mins_per_day, _("Minutes per Day in a Month"), _("Days"), _("Minutes"), "graph2.png")
	
def perMonthInYear [plain] (year):
	date1 = "%s-01-01" % (year)
	date2 = "%s-12-31" % (year)
	where = []
	where.append("date(start) between date('%s') and date('%s')" % (date1, date2))
	cursor = cdrutils.select(fields=['date(start)', 'billsec'], where = where)
	row = cursor.fetchone()
	mins_per_month =  [0 for i in months]
	calls_per_month = [0 for i in months]
	
	while row:
		for c,s in row.items():
			if c=='date(start)':
				month = s.split("-")
				month = int(month[1]) - 1
				
			if c=='billsec':
				minutes = int(s)
				if minutes > 0:
					minutes = minutes/60 + 1
				mins_per_month[month] += minutes
				calls_per_month[month] += 1
		row = cursor.fetchone()
		
	makeTable(_("Month"), calls_per_month, mins_per_month, monthnames)
	makeGraphics(["/a60%s"%s for s in monthnames],
				 calls_per_month,
				 _("Calls per Month in a Year"),
				 _("Months"),
				 _("Calls"),
				 "graph1.png")
				 
	makeGraphics(["/a60%s"%s for s in monthnames],
				 mins_per_month,
				 _("Minutes per Month in a Year"),
				 _("Months"),
				 _("Minutes"),
				 "graph2.png")

def perYear [plain] ():
	where = []
	cursor = cdrutils.select(fields=['date(start)', 'billsec'], where = where)
	row = cursor.fetchone()
	mins_per_year =  [0 for i in years]
	calls_per_year = [0 for i in years]
	
	while row:
		for c,s in row.items():
			if c=='date(start)':
				year = s.split("-")
				year = int(year[0]) - startyear
				
			if c=='billsec':
				minutes = int(s)
				if minutes > 0:
					minutes = minutes/60 + 1
				mins_per_year[year] += minutes
				calls_per_year[year] += 1
		row = cursor.fetchone()
		
	makeTable(_("Year"), calls_per_year, mins_per_year, yearnames)
	makeGraphics(yearnames, calls_per_year, _("Calls per Year"), _("Years"), _("Calls"), "graph1.png")
	makeGraphics(yearnames, mins_per_year, _("Minutes per Year"), _("Years"), _("Minutes"), "graph2.png")
	
def showResults [plain] (day, month, year):
	all = _("All")
	if day != all and month != all and year != all:
		perHourInDay(day, month, year)
	elif day == all and month != all and year != all:
		perDayInMonth(month, year)
	elif day == all and month == all and year != all:
		perMonthInYear(year)
	elif day == all and month == all and year == all:
		perYear()
	else:
		htmltext("<p style='color:red;'>\n")
		htmltext("%s" % _("Sorry, this kind of query is not supported yet"))
		htmltext("</p>")

def cdrForm [plain] (request):
	htmltext("<p>%s</p>" % _("Pick a date:"))
	form = makeForm()
	form.render()
	if form.is_submitted() and not form.has_errors():
		showResults(form["day"], form["month"], form["year"])
	
def _q_index [plain] (request):
	header(_q_desc)
	cdrForm(request)
	footer()
	
