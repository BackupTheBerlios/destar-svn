# -*- coding: utf-8 -*-
#
# Copyright (C) 2005 by Holger Schurig
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


from Templates import *
from quixote.form import *
from quixote.directory import Directory, AccessControlled
from quixote import get_request, get_session, redirect
import backend, manager, configlets
import time,types

def vmForm(self, exitPath=".."):

	if self.form.has_key('_cancel'):
		return redirect(exitPath)
	form = Form()

	dsec = 30
	vmbs = False
	vmu = False


	form.add(IntWidget,          "dsec", dsec, title=_("Seconds of incoming ring time"), maxlength=3, size=3)
	form.add(CheckboxWidget,     "vmbs", vmbs, title=_("Voice mailbox on busy"))
	form.add(CheckboxWidget,     "vmu",  vmu,  title=_("Voice mailbox on timeout/unavailable"))
	form.add(SubmitWidget, '_submit', _("Submit"), render_br=False)
	form.add(SubmitWidget, '_cancel', _("Cancel"), render_br=False)

	if not form.is_submitted() or form.has_errors():
		return form.render()

	phones = backend.getConfiglets(group="Phones")

	for phone in phones:
		manager.setVar('DSEC/%s' % phone.pbx, phone.ext, form['dsec'])
		manager.setVar('VMBS/%s' % phone.pbx, phone.ext, form['vmbs'])
		manager.setVar('VMU/%s' % phone.pbx,  phone.ext, form['vmu'])

	return redirect(exitPath)

class Page(AccessControlled, Directory): 

	_q_parent  = 'page_admin'
	_q_title   = _("Initialize Voicemail")
	_q_desc    = _("Set Voicemail settings for all phones")
	_q_link    = 'initvm'
	_q_menupos = 10
	_q_level   = 3

	_q_exports = ['']

	def _q_access(self):
		self.session = get_session()
		self.request = get_request()
		if self.session.level < self._q_level:
			cantAccessPage()

	def _q_index [plain] (self):
		header(self._q_desc)
		manager.connect()
		if not manager.isConnected():
			'<p><span class="errornotice">'
			htmltext(_("Asterisk is not running!"))
			'</span></p>'
		elif not manager.isLoggedIn():
			# TODO: describe how to set this up
			'<p><span class="errornotice">'
			htmltext(_("The manager access is not working!"))
			'</span></p>'
		else:
			vmForm(self.request)
		footer()

