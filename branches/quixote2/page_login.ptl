# -*- coding: iso-latin-1 -*-
#
# Copyright (C) 2005 by Holger Schurig
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


from Templates import *
from quixote.form import *
from quixote import get_request, get_session, redirect
from quixote.directory import Directory, AccessControlled
import types, backend

class Page(AccessControlled, Directory): 

	_q_parent  = 'page_main'
	_q_title   = _("Login")
	_q_desc    = _("Login into DeStar")
	_q_menupos = 90
	_q_level   = -1

	_q_exports = ['']

	def _q_access(self):
		self.session = get_session()
		self.request = get_request()
		if self.session.level < self._q_level:
			cantAccessPage()

	def loginForm(self, exitPath=".", render=0):

		if self.request.form.has_key('_cancel'):
			return self.request.redirect(exitPath)
		form = Form()

		form.add(StringWidget, "name",  "",  title=htmltext(_("User or phone name/number")), required=True)
		form.add(PasswordWidget, "pw",    "",  title=htmltext(_("Password or PIN")),           required=True)
		form.add(SubmitWidget, '_submit', _("Submit"), render_br=False)
		form.add(SubmitWidget, '_cancel', _("Cancel"), render_br=False)

		if not form.is_submitted() or form.has_errors() or render == 1:
			return form.render()

		return (form['name'], form['pw'])


	def notLoggedIn [plain] (self):
		'<p>'
		htmltext(_('Invalid username or password'))
		self.loginForm(self.request, render=1)
		'.</p>'


	def _q_index [plain] (self):
		self.session = get_session()
		self.request = get_request()

		header(self._q_desc)
		res = self.loginForm(self.request)

		if type(res) != types.TupleType:
			res
		else:
			# First search for a user entry
			for obj in backend.getConfiglets(name="CfgOptUser"):
				if obj.name==res[0] and obj.secret==res[1]:
					self.session.user  = obj.name
					self.session.level = int(obj.level)
					self.session.phone = obj.phone
					self.session.language = obj.language
					self.session.pbx = obj.pbx
					return redirect(str('../user/info'))

			# Now search for a phone entry with proper extension/voicemail pin
			for obj in backend.getConfiglets(group="Phones"):
				if (obj.ext==res[0] or obj.name==res[0]) and (obj.secret==res[1] or obj.pin==res[1]):
					self.session.user  = obj.name
					self.session.level = 1
					self.session.phone = obj.name
					self.session.language = 'en'
					self.session.pbx = obj.pbx
					return redirect(str('../user/info'))
			self.notLoggedIn()
		footer()
