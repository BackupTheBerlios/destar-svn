# -*- coding: utf-8 -*-
#
# Copyright (C) 2005 by Holger Schurig
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


from Templates import *
from quixote.form2 import *
import types, backend

_q_parent  = 'page_main'
_q_title   = _("Login")
_q_desc    = _("Login into DeStar")
_q_menupos = 90
_q_level   = -1


def _q_access(request):
        if request.session.level < _q_level:
		cantAccessPage()

def loginForm(request, exitPath=".", render=0):

	if request.form.has_key('_cancel'):
		return request.redirect(exitPath)
	form = Form()

	form.add(StringWidget, "name",  "",  title=htmltext(_("User or phone name/number")), required=True)
	form.add(PasswordWidget, "pw",    "",  title=htmltext(_("Password or PIN")),           required=True)
	form.add(SubmitWidget, '_submit', _("Submit"), render_br=False)
	form.add(SubmitWidget, '_cancel', _("Cancel"), render_br=False)

	if not form.is_submitted() or form.has_errors() or render == 1:
		return form.render()

	return (form['name'], form['pw'])


def notLoggedIn [plain] (request):
	'<p>'
	htmltext(_('Invalid username or password'))
	loginForm(request, render=1)
	'.</p>'


def _q_index [plain] (request):
	header(_q_desc)
	res = loginForm(request)

	if type(res) != types.TupleType:
		res
	else:
		# First search for a user entry
		for obj in backend.getConfiglets(name="CfgOptUser"):
			if obj.name==res[0] and obj.secret==res[1]:
				request.session.user  = obj.name
				request.session.level = int(obj.level)
				request.session.phone = obj.phone
				request.session.language = obj.language
				request.session.pbx = obj.pbx
				return request.redirect(str('../user/info'))

		# Now search for a phone entry with proper extension/voicemail pin
		for obj in backend.getConfiglets(group="Phones"):
			if type(obj) == 'CfgPhoneExtension':
				continue
			if (obj.ext==res[0] or obj.name==res[0]) and (obj.secret==res[1] or str(obj.pin)==res[1]):
				request.session.user  = obj.name
				request.session.level = 1
				request.session.phone = obj.name
				request.session.language = 'en'
				request.session.pbx = obj.pbx
				return request.redirect(str('../user/info'))
		notLoggedIn(request)
	footer()
