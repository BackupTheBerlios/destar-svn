# -*- coding: iso-latin-1 -*-
#
# Copyright (C) 2005 Manuel Alejandro Cer√≥n Estrada <ceronman@gmail.com>
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

from Templates import *
from quixote.form2 import *
try:
        from pychart import *
except ImportError:
        print "Note: You should install python-pychart to generate statistics"

import re
import cdrutils
import time

class CallData:
	def __init__(self):
		self.calls_number = 0
		self.minutes = 0
		self.cost = 0
		self.answered = 0
		self.not_answered = 0
		self.busy = 0
		self.failed = 0
		self.seconds = 0
		self.holdtime = 0
		self.completed_by_agent = 0
		self.completed_by_caller = 0
		self.uncompleted = 0

	
	def addCall(self, seconds, cost_per_minute, disp):
		self.calls_number += 1
		mins = int(seconds)
		if mins > 0:
			mins = mins/60 + 1
			
		self.minutes += mins
		self.cost += mins * cost_per_minute
		
		if disp == "ANSWERED":
			self.answered += 1
		elif disp == "NO ANSWER":
			self.not_answered += 1
		elif disp == "BUSY":
			self.busy += 1
		elif disp == "FAILED":
			self.failed += 1
	
	def addQueueCall(self, holdtime=0, calltime=0, disp=""):
		self.calls_number += 1
		self.seconds += int(calltime)
		self.holdtime += int(holdtime)
		if disp == "COMPLETEAGENT":
			self.completed_by_agent += 1
		elif disp == "COMPLETECALLER":
			self.completed_by_caller += 1
		elif disp == "uncompleted":
			self.uncompleted += 1


startyear = 2005
all = _("All")
years = ["%d"%i for i in range(startyear,time.localtime()[0]+1)]  
months = ["%02d"%(i+1) for i in range(12)]
days = ["%02d"%(i+1) for i in range(31)]
hours = ["%02d"%i for i in range(24)]

yearnames = years
monthnames = [ _('January'), _('February'), _('March'),
				_('April'),	_('May'), _('June'), _('July'), _('August'), 
				_('September'), _('October'), _('November'), _('December') ]
daynames = ["%d"%(i+1) for i in range(31)]
hournames =["%d:00"%i for i in range(24)] 

def getMonthnames ():
	mn = []
	for m in monthnames: mn.append(_(m))
	return mn

def makeCallsTable [plain] (label, calls, names):
	'<table border="1"> \n'
	'<tr> <td><b>'+ label
	'</b></td><td><b>'+_(str("Number of Calls"))
	'</b></td><td><b>'+_(str("Minutes"))
	'</b></td><td><b>'+_(str("Cost"))
	'</b></td><td><b>'+_(str("Answered Calls"))
	'</b></td><td><b>'+_(str("Not Answered Calls"))
	'</b></td><td><b>'+_(str("Busy Calls"))
	'</b></td><td><b>'+_(str("Failed Calls"))
	'</b></td></tr>\n'
	for i in range(len(calls)):
		'<tr>'
		"<td>%s</td>" % names[i]
		"<td>%d</td>" % calls[i].calls_number
		"<td>%d</td>" % calls[i].minutes
		"<td>%d</td>" % calls[i].cost
		"<td>%d</td>" % calls[i].answered
		"<td>%d</td>" % calls[i].not_answered
		"<td>%d</td>" % calls[i].busy
		"<td>%d</td>" % calls[i].failed
		'</tr>\n'
	'</table>\n<br/>'

#def makeAgentCallsTable [plain] (label, names, completed, dumped, transfered):
def makeAgentCallsTable [plain] (label, completed, dumped, names):
	'<table border="1"> \n'
	'<tr> <td><b>'+ label
	'</b></td><td><b>'+_(str("Number of Calls"))
	#'</b></td><td><b>'+_(str("% Number of Calls"))
	'</b></td><td><b>'+_(str("Avg. Hold Time"))
	#'</b></td><td><b>'+_(str("% Avg. Hold Time"))
	'</b></td><td><b>'+_(str("Avg. Call Duration"))
	#'</b></td><td><b>'+_(str("% Avg. Call Duration"))
	#'</b></td><td><b>'+_(str("Transfered Calls"))
	#'</b></td><td><b>'+_(str("% Transfered Calls"))
	'</b></td><td><b>'+_(str("Dumped Calls"))
	#'</b></td><td><b>'+_(str("% Dumped Calls"))
	'</b></td></tr>\n'
	for i in range(len(names)):
		'<tr>'
		"<td>%s</td>" % names[i]
		"<td>%d</td>" % completed[i].calls_number
		"<td>%d</td>" % (completed[i].calls_number and (completed[i].holdtime / completed[i].calls_number) or 0)
		"<td>%d</td>" % (completed[i].calls_number and (completed[i].seconds / completed[i].calls_number) or 0)
		if i < len(dumped):
			"<td>%d</td>" % dumped[i].calls_number
		else:
			"<td>0</td>" 
		'</tr>\n'
	'</table>\n<br/>'

def makeQueueCallsTable [plain] (label, completed, uncompleted, names):
	'<table border="1"> \n'
	'<tr> <td><b>'+ label
	'</b></td><td><b>'+_(str("Completed Calls"))
	#'</b></td><td><b>'+_(str("% Completed"))
	'</b></td><td><b>'+_(str("Uncompleted Calls"))
	#'</b></td><td><b>'+_(str("% Uncompleted"))
	'</b></td><td><b>'+_(str("Avg. Hold Time"))
	#'</b></td><td><b>'+_(str("% Avg. Hold Time"))
	'</b></td><td><b>'+_(str("Avg. Call Duration"))
	#'</b></td><td><b>'+_(str("% Avg. Call Duration"))
	#'</b></td><td><b>'+_(str("Transfered Calls"))
	#'</b></td><td><b>'+_(str("% Transfered Calls"))
	'</b></td></tr>\n'
	for i in range(len(names)):
		'<tr>'
		"<td>%s</td>" % names[i]
		"<td>%d</td>" % completed[i].calls_number
		"<td>%d</td>" % uncompleted[i].calls_number
		"<td>%d</td>" % (completed[i].calls_number and (completed[i].holdtime / completed[i].calls_number) or 0)
		"<td>%d</td>" % (completed[i].calls_number and (completed[i].seconds / completed[i].calls_number) or 0)
		'</tr>\n'
	'</table>\n<br/>'

def makeCallsGraphic [plain] (names, calls, title, labelx, filename):
	theme.use_color = True;
	theme.default_font_size = 14
	theme.reinitialize()
	
	can = canvas.init("/tmp/%s" % filename, "png")
	
	number_of_calls = [i.calls_number for i in calls]
	
	interval = max(number_of_calls) // 6
		
	data = zip( names,
				[i.answered for i in calls],
				[i.not_answered for i in calls],
				[i.busy for i in calls],
				[i.failed for i in calls])

	chart_object.set_defaults(area.T, 
								size = (510, 280),
								x_coord = category_coord.T(data, 0))
	
	chart_object.set_defaults(bar_plot.T,
								width = 15,
								data = data)
	
	ar = area.T(x_axis=axis.X(label=unicode(_(labelx), 'utf-8') ),
				y_axis=axis.Y(label=unicode(_('Calls'), 'utf-8'), tic_interval=interval))
	
	plot1=bar_plot.T(label=unicode(_('Answered'), 'utf-8'), hcol=1, fill_style=fill_style.goldenrod)
	plot2=bar_plot.T(label=unicode(_('Not Answered'), 'utf-8'), hcol=2, stack_on = plot1, fill_style=fill_style.gray70)
	plot3=bar_plot.T(label=unicode(_('Busy'), 'utf-8'), hcol=3, stack_on = plot2, fill_style=fill_style.gray50)
	plot4=bar_plot.T(label=unicode(_('Failed'), 'utf-8'), hcol=4, stack_on = plot3, fill_style=fill_style.darkseagreen)
	ar.add_plot(plot1,plot2,plot3,plot4)
	ar.draw(can)
	can.close()
	
	htmltext('<br/><br/><h3>')
	htmltext(title)
	htmltext('</h3>')
	
	htmltext('<p>')
	htmltext('<img alt="table" src="/graphs/%s" />' % filename)
	htmltext('</p>')				

def makeGraphic [plain] (names, values, title, labelx, labely, filename):

	theme.use_color = True;
	theme.default_font_size = 14
	theme.reinitialize()
	
	can = canvas.init("/tmp/%s" % filename, "png")
	
	interval = max(values) // 6
		
	data = zip(names, values)

	chart_object.set_defaults(area.T, 
								size = (510, 280),
								x_coord = category_coord.T(data, 0))
	
	chart_object.set_defaults(bar_plot.T,
								width = 15,
								data = data)
	
	ar = area.T(x_axis=axis.X(label=unicode(_(labelx), 'utf-8') ),
				y_axis=axis.Y(label=unicode(_(labely), 'utf-8'), tic_interval=interval))
	
	plot1=bar_plot.T(label=unicode(_(labely), 'utf-8'), hcol=1, fill_style=fill_style.darkseagreen)
	ar.add_plot(plot1)
	ar.draw(can)
	can.close()
	
	htmltext('<br/><br/><h3>')
	htmltext(title)
	htmltext('</h3>')
	
	htmltext('<p>')
	htmltext('<img alt="table" src="/graphs/%s" />' % filename)
	htmltext('</p>')
	
